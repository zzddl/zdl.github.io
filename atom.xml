<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zzddl.github.io/zdl.github.io/</id>
    <title>zdl&apos;s blog</title>
    <updated>2020-08-19T02:54:36.798Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zzddl.github.io/zdl.github.io/"/>
    <link rel="self" href="https://zzddl.github.io/zdl.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zzddl.github.io/zdl.github.io/images/avatar.png</logo>
    <icon>https://zzddl.github.io/zdl.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, zdl&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[html学习8.19 -- HTML5 SSE]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-sse/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-sse/">
        </link>
        <updated>2020-08-19T02:54:00.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Server-Sent 事件允许网页从服务器获得更新。</strong></p>
<h3 id="接收-server-sent-事件通知">接收 Server-Sent 事件通知</h3>
<p>EventSource 对象用于接收服务器发送事件通知：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;获得服务器更新&lt;/h1&gt;
&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;

&lt;script&gt;
if(typeof(EventSource)!==&quot;undefined&quot;)
  {
  var source=new EventSource(&quot;/example/html5/demo_sse.php&quot;);
  source.onmessage=function(event)
    {
    document.getElementById(&quot;result&quot;).innerHTML+=event.data + &quot;&lt;br /&gt;&quot;;
    };
  }
else
  {
  document.getElementById(&quot;result&quot;).innerHTML=&quot;抱歉，您的浏览器不支持 server-sent 事件 ...&quot;;
  }
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>解释：</p>
<ul>
<li>创建一个新的 EventSource 对象，然后规定发送更新的页面的 URL（本例中是 &quot;demo_sse.php&quot;）</li>
<li>每当接收到一次更新，就会发生 onmessage 事件</li>
<li>当 onmessage 事件发生时，把已接收的数据推入 id 为 &quot;result&quot; 的元素中</li>
</ul>
<h3 id="检测-server-sent-事件支持">检测 Server-Sent 事件支持</h3>
<pre><code class="language-html">if(typeof(EventSource) !== &quot;undefined&quot;) {
    // 是的！支持服务器发送事件！
    // 一些代码.....
} else {
    // 抱歉！不支持服务器发送事件！
}
</code></pre>
<h3 id="eventsource-对象">EventSource 对象</h3>
<table>
<thead>
<tr>
<th style="text-align:left">事件</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onopen</td>
<td style="text-align:left">当通往服务器的连接被打开</td>
</tr>
<tr>
<td style="text-align:left">onmessage</td>
<td style="text-align:left">当接收到消息</td>
</tr>
<tr>
<td style="text-align:left">onerror</td>
<td style="text-align:left">当发生错误</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.19 -- HTML5 web workers]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-web-workers/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-web-workers/">
        </link>
        <updated>2020-08-19T02:49:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="web-worker">Web Worker</h3>
<p>当在 HTML 页面中执行脚本时，页面是不可响应的，直到脚本已完成。</p>
<p>Web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能</p>
<h3 id="检测-web-worker-支持">检测 Web Worker 支持</h3>
<pre><code class="language-html">if (typeof(Worker) !== &quot;undefined&quot;) {
    // 是的！支持 Web worker！
    // 一些代码.....
} else {
    // 抱歉！不支持 Web Worker！
}
</code></pre>
<h3 id="创建-web-worker-文件">创建 Web Worker 文件</h3>
<p>让我们在一个外部 JavaScript 文件中创建我们的 web worker。</p>
<p>创建计数脚本。该脚本存储于 &quot;demo_workers.js&quot; 文件中：</p>
<pre><code class="language-html">var i = 0;

function timedCount() {
    i = i + 1;
    postMessage(i);
    setTimeout(&quot;timedCount()&quot;,500);
}

timedCount();
</code></pre>
<p>以上代码中重要的部分是 postMessage() 方法 - 它用于向 HTML 页面传回一段消息。</p>
<h3 id="创建-web-worker-对象">创建 Web Worker 对象</h3>
<p>已经有 web worker 文件，需要从 HTML 页面调用它。</p>
<p>检测是否存在 worker，如果不存在，- 它会创建一个新的 web worker 对象，然后运行 &quot;demo_workers.js&quot; 中的代码：</p>
<pre><code class="language-html">if (typeof(w) == &quot;undefined&quot;) {
    w = new Worker(&quot;demo_workers.js&quot;);
}
</code></pre>
<p>然后我们就可以从 web worker 发生和接收消息了。</p>
<p>向 web worker 添加一个 &quot;onmessage&quot; 事件监听器：</p>
<pre><code class="language-html">w.onmessage = function(event){
    document.getElementById(&quot;result&quot;).innerHTML = event.data;
};
</code></pre>
<p>当 web worker 传送消息时，会执行事件监听器中的代码。来自 web worker 的数据会存储于 event.data 中。</p>
<h3 id="终止-web-worker">终止 Web Worker</h3>
<p>当创建 web worker 后，它会继续监听消息（即使在外部脚本完成后）直到其被终止为止。</p>
<p>终止并且释放资源，使用 terminate() 方法：</p>
<pre><code class="language-html">w.terminate();
</code></pre>
<h3 id="复用-web-worker">复用 Web Worker</h3>
<p>把 worker 变量设置为 undefined，在其被终止后，可以重复使用该代码：</p>
<pre><code class="language-html">w = undefined;
</code></pre>
<h3 id="完整的-web-worker-实例代码">完整的 Web Worker 实例代码</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

&lt;p&gt;Count numbers: &lt;output id=&quot;result&quot;&gt;&lt;/output&gt;&lt;/p&gt;
&lt;button onclick=&quot;startWorker()&quot;&gt;Start Worker&lt;/button&gt; 
&lt;button onclick=&quot;stopWorker()&quot;&gt;Stop Worker&lt;/button&gt;
&lt;br&gt;&lt;br&gt;

&lt;script&gt;
var w;

function startWorker() {
    if(typeof(Worker) !== &quot;undefined&quot;) {
        if(typeof(w) == &quot;undefined&quot;) {
            w = new Worker(&quot;demo_workers.js&quot;);
        }
        w.onmessage = function(event) {
            document.getElementById(&quot;result&quot;).innerHTML = event.data;
        };
    } else {
        document.getElementById(&quot;result&quot;).innerHTML = &quot;Sorry! No Web Worker support.&quot;;
    }
}

function stopWorker() { 
    w.terminate();
    w = undefined;
}
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="web-worker-和-dom">Web Worker 和 DOM</h3>
<p>由于 web worker 位于外部文件中，它们无法访问下例 JavaScript 对象：</p>
<ul>
<li>window 对象</li>
<li>document 对象</li>
<li>parent 对象</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.19 -- HTML5应用缓存]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-ying-yong-huan-cun/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-ying-yong-huan-cun/">
        </link>
        <updated>2020-08-19T02:31:29.000Z</updated>
        <content type="html"><![CDATA[<p><strong>使用应用程序缓存，通过创建 cache manifest 文件，可轻松创建 web 应用的离线版本。</strong></p>
<h3 id="应用程序缓存">应用程序缓存</h3>
<p>HTML5 引入了应用程序缓存（Application Cache），可对 web 应用进行缓存，并可在没有因特网连接时进行访问。</p>
<p>三个优势：</p>
<ol>
<li>离线浏览 - 用户可在应用离线时使用它们</li>
<li>速度 - 已缓存资源加载得更快</li>
<li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</li>
</ol>
<h3 id="cache-manifest-基础">Cache Manifest 基础</h3>
<p>如需启用应用程序缓存，请在文档的 &lt; html&gt; 标签中包含 manifest 属性：</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html manifest=&quot;demo.appcache&quot;&gt;
...
&lt;/html&gt;
</code></pre>
<p>每个指定了 manifest 的页面在用户对其访问时都会被缓存</p>
<p>manifest 文件的建议文件扩展名是：&quot;.appcache&quot;。</p>
<h3 id="manifest-文件">Manifest 文件</h3>
<p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。</p>
<p>三个部分：</p>
<ul>
<li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li>
<li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li>
<li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li>
</ul>
<h3 id="cache-manifest">CACHE MANIFEST</h3>
<pre><code class="language-html">CACHE MANIFEST
/theme.css
/logo.gif
/main.js
</code></pre>
<p>上述列出三个资源：一个 CSS 文件，一个 GIF 图像，以及一个 JavaScript 文件。当 manifest 文件被加载后，浏览器会从网站的根目录下载这三个文件。断开网络连接，这些资源仍然可用。</p>
<h3 id="network">NETWORK</h3>
<p>NETWORK 部分规定文件 &quot;login.php&quot; 永远不会被缓存，且离线时是不可用的：</p>
<pre><code class="language-html">NETWORK:
login.asp
</code></pre>
<p>可以使用星号来指示所有其他其他资源/文件都需要因特网连接：</p>
<pre><code class="language-html">NETWORK:
*

FALLBACK
</code></pre>
<p>下面的 FALLBACK 部分规定如果无法建立因特网连接，则用 &quot;offline.html&quot; 替代 /html/ 目录中的所有文件：</p>
<pre><code class="language-html">FALLBACK:
/html/ /offline.html
</code></pre>
<p>**注释：**第一个 URI 是资源，第二个是替补。</p>
<h3 id="实例-完整的-cache-manifest-文件">实例 - 完整的 Cache Manifest 文件</h3>
<pre><code class="language-html">CACHE MANIFEST
# 2012-02-21 v1.0.0
/theme.css
/logo.gif
/main.js

NETWORK:
login.asp

FALLBACK:
/html/ /offline.html
</code></pre>
<p>以 &quot;#&quot; 开头的是注释行</p>
<h3 id="cache-manifest-实例">Cache Manifest 实例</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html manifest=&quot;/example/html5/demo_html.appcache&quot;&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/example/html5/demo_time.js&quot;&gt;
&lt;/script&gt;
&lt;p id=&quot;timePara&quot;&gt;&lt;button onclick=&quot;getDateTime()&quot;&gt;获得日期和事件&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/i/w3school_banner.gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;请打开&lt;a href=&quot;/example/html5/html5_html_manifest.html&quot; target=&quot;_blank&quot;&gt;这个页面&lt;/a&gt;，然后脱机浏览，重新加载页面。页面中的脚本和图像依然可用。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<!DOCTYPE html>
<html manifest="/example/html5/demo_html.appcache">
<body>
<script type="text/javascript" src="/example/html5/demo_time.js">
</script>
<p id="timePara"><button onclick="getDateTime()">获得日期和事件</button></p>
<p><img src="/i/w3school_banner.gif" /></p>
<p>请打开<a href="/example/html5/html5_html_manifest.html" target="_blank">这个页面</a>，然后脱机浏览，重新加载页面。页面中的脚本和图像依然可用。</p>
</body>
</html>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.19 -- html5本地存储]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-ben-di-cun-chu/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-819-html5-ben-di-cun-chu/">
        </link>
        <updated>2020-08-19T02:15:50.000Z</updated>
        <content type="html"><![CDATA[<p><strong>HTML 本地存储：优于 cookies。</strong></p>
<h3 id="html本地存储">html本地存储</h3>
<p>通过本地存储（Local Storage），web 应用程序能够在用户浏览器中对数据进行本地的存储。</p>
<p>存储限制比cookies大得多。</p>
<h3 id="html-本地存储对象">HTML 本地存储对象</h3>
<p>HTML 本地存储提供了两个在客户端存储数据的对象：</p>
<ul>
<li>window.localStorage - 存储没有截止日期的数据</li>
<li>window.sessionStorage - 针对一个 session 来存储数据（当关闭浏览器标签页时数据会丢失）</li>
</ul>
<p>在使用本地存储时，请检测 localStorage 和 sessionStorage 的浏览器支持：</p>
<pre><code class="language-html">if (typeof(Storage) !== &quot;undefined&quot;) {
    // 针对 localStorage/sessionStorage 的代码
} else {
    // 抱歉！不支持 Web Storage ..
}
</code></pre>
<h3 id="localstorage-对象">localStorage 对象</h3>
<p>localStorage 对象存储的是没有截止日期的数据。当浏览器被关闭时数据不会被删除，在下一天、周或年中，都是可用的。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;

&lt;script&gt;
// Check browser support
if (typeof(Storage) !== &quot;undefined&quot;) {
    // Store
    localStorage.setItem(&quot;lastname&quot;, &quot;Gates&quot;);
    // Retrieve
    document.getElementById(&quot;result&quot;).innerHTML = localStorage.getItem(&quot;lastname&quot;);
} else {
    document.getElementById(&quot;result&quot;).innerHTML = &quot;抱歉！您的浏览器不支持 Web Storage ...&quot;;
}
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>解释：</p>
<ul>
<li>创建 localStorage 名称/值对，其中：name=&quot;lastname&quot;，value=&quot;Gates&quot;</li>
<li>取回 &quot;lastname&quot; 的值，并把它插到 id=&quot;result&quot; 的元素中</li>
</ul>
<p>也可以这样：</p>
<pre><code class="language-html">// 存储
localStorage.lastname = &quot;Gates&quot;;
// 取回
document.getElementById(&quot;result&quot;).innerHTML = localStorage.lastname;
</code></pre>
<p>删除 &quot;lastname&quot; localStorage 项目的语法如下：</p>
<pre><code class="language-html">localStorage.removeItem(&quot;lastname&quot;);
</code></pre>
<h3 id="实例-用户点击次数">实例-用户点击次数</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function clickCounter() {
    if(typeof(Storage) !== &quot;undefined&quot;) {
        if (localStorage.clickcount) {
            localStorage.clickcount = Number(localStorage.clickcount)+1;
        } else {
            localStorage.clickcount = 1;
        }
        document.getElementById(&quot;result&quot;).innerHTML = &quot;您已经点击这个按钮 &quot; + localStorage.clickcount + &quot; 次。&quot;;
    } else {
        document.getElementById(&quot;result&quot;).innerHTML = &quot;抱歉！您的浏览器不支持 Web Storage ...&quot;;
    }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;&lt;button onclick=&quot;clickCounter()&quot; type=&quot;button&quot;&gt;请点击这里！&lt;/button&gt;&lt;/p&gt;
&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;p&gt;请点击按钮使计数器递增。&lt;/p&gt;
&lt;p&gt;请关闭浏览器或标签页，然后再试一次，计数器将继续计数（不会重置）。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<!DOCTYPE html>
<html>
<head>
<script>
function clickCounter() {
    if(typeof(Storage) !== "undefined") {
        if (localStorage.clickcount) {
            localStorage.clickcount = Number(localStorage.clickcount)+1;
        } else {
            localStorage.clickcount = 1;
        }
        document.getElementById("result").innerHTML = "您已经点击这个按钮 " + localStorage.clickcount + " 次。";
    } else {
        document.getElementById("result").innerHTML = "抱歉！您的浏览器不支持 Web Storage ...";
    }
}
</script>
</head>
<body>
<p><button onclick="clickCounter()" type="button">请点击这里！</button></p>
<div id="result"></div>
<p>请点击按钮使计数器递增。</p>
<p>请关闭浏览器或标签页，然后再试一次，计数器将继续计数（不会重置）。</p>
</body>
</html>
<h3 id="sessionstorage-对象">sessionStorage 对象</h3>
<p>sessionStorage 对象等同 localStorage 对象，不同之处在于只对一个 session 存储数据。如果用户关闭具体的浏览器标签页，数据也会被删除。</p>
<p>当前session中用户点击次数：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function clickCounter() {
    if(typeof(Storage) !== &quot;undefined&quot;) {
        if (sessionStorage.clickcount) {
            sessionStorage.clickcount = Number(sessionStorage.clickcount)+1;
        } else {
            sessionStorage.clickcount = 1;
        }
        document.getElementById(&quot;result&quot;).innerHTML = &quot;在本 session 中，您已经点击这个按钮 &quot; + sessionStorage.clickcount + &quot; 次。&quot;;
    } else {
        document.getElementById(&quot;result&quot;).innerHTML = &quot;抱歉！您的浏览器不支持 Web Storage ...&quot;;
    }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;&lt;button onclick=&quot;clickCounter()&quot; type=&quot;button&quot;&gt;请点击这里&lt;/button&gt;&lt;/p&gt;
&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;p&gt;请点击按钮使计数器递增。&lt;/p&gt;
&lt;p&gt;请关闭浏览器或标签页，然后再试一次，计数器会重置。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<!DOCTYPE html>
<html>
<head>
<script>
function clickCounter() {
    if(typeof(Storage) !== "undefined") {
        if (sessionStorage.clickcount) {
            sessionStorage.clickcount = Number(sessionStorage.clickcount)+1;
        } else {
            sessionStorage.clickcount = 1;
        }
        document.getElementById("result").innerHTML = "在本 session 中，您已经点击这个按钮 " + sessionStorage.clickcount + " 次。";
    } else {
        document.getElementById("result").innerHTML = "抱歉！您的浏览器不支持 Web Storage ...";
    }
}
</script>
</head>
<body>
<p><button onclick="clickCounter()" type="button">请点击这里</button></p>
<div id="result"></div>
<p>请点击按钮使计数器递增。</p>
<p>请关闭浏览器或标签页，然后再试一次，计数器会重置。</p>
</body>
</html>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.18 -- HTML5拖放]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html5-tuo-fang/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html5-tuo-fang/">
        </link>
        <updated>2020-08-18T15:34:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="html-拖放实例">HTML 拖放实例</h3>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function allowDrop(ev) {
    ev.preventDefault();
}

function drag(ev) {
    ev.dataTransfer.setData(&quot;text&quot;, ev.target.id);
}

function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData(&quot;text&quot;);
    ev.target.appendChild(document.getElementById(data));
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;

&lt;img id=&quot;drag1&quot; src=&quot;img_logo.gif&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; width=&quot;336&quot; height=&quot;69&quot;&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="把元素设置为可拖放">把元素设置为可拖放</h3>
<pre><code class="language-html">&lt;img draggable=&quot;true&quot;&gt;
</code></pre>
<h3 id="拖放的内容-ondragstart-和-setdata">拖放的内容 - ondragstart 和 setData()</h3>
<p>ondragstart 属性调用了一个 drag(event) 函数，规定拖动什么数据</p>
<p>dataTransfer.setData() 方法设置被拖动数据的数据类型和值</p>
<pre><code class="language-html">function drag(ev) {
    ev.dataTransfer.setData(&quot;text&quot;, ev.target.id);
}
</code></pre>
<h3 id="拖到何处-ondragover">拖到何处 - ondragover</h3>
<p>由 ondragover 事件的 event.preventDefault() 方法完成</p>
<pre><code class="language-html">event.preventDefault()
</code></pre>
<h3 id="进行放置-ondrop">进行放置 - ondrop</h3>
<p>ondrop 属性调用了一个函数，drop(event)</p>
<pre><code class="language-html">function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData(&quot;text&quot;);
    ev.target.appendChild(document.getElementById(data));
}
</code></pre>
<p>解释：</p>
<ul>
<li>调用 preventDefault() 来阻止数据的浏览器默认处理方式（drop 事件的默认行为是以链接形式打开）</li>
<li>通过 dataTransfer.getData() 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据</li>
<li>被拖数据是被拖元素的 id (&quot;drag1&quot;)</li>
<li>把被拖元素追加到放置元素中</li>
</ul>
<h3 id="来回拖放图片">来回拖放图片</h3>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style type=&quot;text/css&quot;&gt;
#div1, #div2
{float:left; width:198px; height:66px; margin:10px;padding:10px;border:1px solid #aaaaaa;}
&lt;/style&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
function allowDrop(ev)
{
ev.preventDefault();
}

function drag(ev)
{
ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);
}

function drop(ev)
{
ev.preventDefault();
var data=ev.dataTransfer.getData(&quot;Text&quot;);
ev.target.appendChild(document.getElementById(data));
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;
  &lt;img src=&quot;/i/eg_dragdrop_w3school.gif&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; id=&quot;drag1&quot; /&gt;
&lt;/div&gt;
&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.18 -- html5地理位置]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html5-di-li-wei-zhi/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html5-di-li-wei-zhi/">
        </link>
        <updated>2020-08-18T15:26:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="html5-使用地理定位">HTML5 - 使用地理定位</h3>
<p>getCurrentPosition() 方法来获得用户的位置。</p>
<pre><code class="language-HTML">&lt;script&gt;
var x=document.getElementById(&quot;demo&quot;);
function getLocation()
  {
  if (navigator.geolocation)
    {
    navigator.geolocation.getCurrentPosition(showPosition);
    }
  else{x.innerHTML=&quot;Geolocation is not supported by this browser.&quot;;}
  }
function showPosition(position)
  {
  x.innerHTML=&quot;Latitude: &quot; + position.coords.latitude +
  &quot;&lt;br /&gt;Longitude: &quot; + position.coords.longitude;
  }
&lt;/script&gt;
</code></pre>
<p>如果getCurrentPosition()运行成功，则向参数showPosition中规定的函数返回一个coordinates对象</p>
<p>showPosition() 函数获得并显示经度和纬度</p>
<h3 id="处理错误和拒绝">处理错误和拒绝</h3>
<p>getCurrentPosition() 方法的第二个参数用于处理错误。它规定当获取用户位置失败时运行的函数：</p>
<pre><code class="language-html">function showError(error)
  {
  switch(error.code)
    {
    case error.PERMISSION_DENIED:
      x.innerHTML=&quot;User denied the request for Geolocation.&quot;
      break;
    case error.POSITION_UNAVAILABLE:
      x.innerHTML=&quot;Location information is unavailable.&quot;
      break;
    case error.TIMEOUT:
      x.innerHTML=&quot;The request to get user location timed out.&quot;
      break;
    case error.UNKNOWN_ERROR:
      x.innerHTML=&quot;An unknown error occurred.&quot;
      break;
    }
  }
</code></pre>
<p>错误代码：</p>
<ul>
<li>Permission denied - 用户不允许地理定位</li>
<li>Position unavailable - 无法获取当前位置</li>
<li>Timeout - 操作超时</li>
</ul>
<h3 id="在地图中显示结果">在地图中显示结果</h3>
<p>如需在地图中显示结果，您需要访问可使用经纬度的地图服务，比如谷歌地图或百度地图：</p>
<pre><code class="language-html">function showPosition(position)
{
var latlon=position.coords.latitude+&quot;,&quot;+position.coords.longitude;

var img_url=&quot;http://maps.googleapis.com/maps/api/staticmap?center=&quot;
+latlon+&quot;&amp;zoom=14&amp;size=400x300&amp;sensor=false&quot;;

document.getElementById(&quot;mapholder&quot;).innerHTML=&quot;&lt;img src='&quot;+img_url+&quot;' /&gt;&quot;;
}
</code></pre>
<h3 id="getcurrentposition-方法-返回数据">getCurrentPosition() 方法 - 返回数据</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">coords.latitude</td>
<td style="text-align:left">十进制数的纬度</td>
</tr>
<tr>
<td style="text-align:left">coords.longitude</td>
<td style="text-align:left">十进制数的经度</td>
</tr>
<tr>
<td style="text-align:left">coords.accuracy</td>
<td style="text-align:left">位置精度</td>
</tr>
<tr>
<td style="text-align:left">coords.altitude</td>
<td style="text-align:left">海拔，海平面以上以米计</td>
</tr>
<tr>
<td style="text-align:left">coords.altitudeAccuracy</td>
<td style="text-align:left">位置的海拔精度</td>
</tr>
<tr>
<td style="text-align:left">coords.heading</td>
<td style="text-align:left">方向，从正北开始以度计</td>
</tr>
<tr>
<td style="text-align:left">coords.speed</td>
<td style="text-align:left">速度，以米/每秒计</td>
</tr>
<tr>
<td style="text-align:left">timestamp</td>
<td style="text-align:left">响应的日期/时间</td>
</tr>
</tbody>
</table>
<h3 id="geolocation-对象-其他有趣的方法">Geolocation 对象 - 其他有趣的方法</h3>
<p>watchPosition() - 返回用户的当前位置，并继续返回用户移动时的更新位置。</p>
<p>clearWatch() - 停止 watchPosition() 方法</p>
<pre><code class="language-html">&lt;script&gt;
var x=document.getElementById(&quot;demo&quot;);
function getLocation()
  {
  if (navigator.geolocation)
    {
    navigator.geolocation.watchPosition(showPosition);
    }
  else{x.innerHTML=&quot;Geolocation is not supported by this browser.&quot;;}
  }
function showPosition(position)
  {
  x.innerHTML=&quot;Latitude: &quot; + position.coords.latitude +
  &quot;&lt;br /&gt;Longitude: &quot; + position.coords.longitude;
  }
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.18 -- HTML媒体]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html-mei-ti/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html-mei-ti/">
        </link>
        <updated>2020-08-18T15:14:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="html多媒体">HTML多媒体</h2>
<h3 id="视频格式">视频格式</h3>
<table>
<thead>
<tr>
<th>格式</th>
<th>文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>AVI</td>
<td>.avi</td>
</tr>
<tr>
<td>WMV</td>
<td>.wmv</td>
</tr>
<tr>
<td>MPEG</td>
<td>.mpg<br />.mpeg</td>
</tr>
<tr>
<td>QuickTime</td>
<td>.mov</td>
</tr>
<tr>
<td>RealVideo</td>
<td>.rm<br />.ram</td>
</tr>
<tr>
<td>Flash</td>
<td>.swf <br />.flv</td>
</tr>
<tr>
<td>Mpeg-4</td>
<td>.mp4</td>
</tr>
</tbody>
</table>
<h3 id="声音格式">声音格式</h3>
<table>
<thead>
<tr>
<th>格式</th>
<th>文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>MIDI</td>
<td>.mid<br /> .midi</td>
</tr>
<tr>
<td>RealAudio</td>
<td>.rm<br />.ram</td>
</tr>
<tr>
<td>Wave</td>
<td>.wav</td>
</tr>
<tr>
<td>WMA</td>
<td>.wma</td>
</tr>
<tr>
<td>MP3</td>
<td>.mp3 <br />.mpga</td>
</tr>
</tbody>
</table>
<h2 id="html对象">HTML对象</h2>
<h3 id="html-object-元素">HTML Object 元素</h3>
<p><strong>&lt; object&gt; 的作用是支持 HTML 助手（插件）。</strong></p>
<h3 id="使用-quicktime-来播放-wave-音频">使用 QuickTime 来播放 Wave 音频</h3>
<pre><code class="language-html">&lt;object width=&quot;420&quot; height=&quot;360&quot;
classid=&quot;clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B&quot;
codebase=&quot;http://www.apple.com/qtactivex/qtplugin.cab&quot;&gt;
&lt;param name=&quot;src&quot; value=&quot;bird.wav&quot; /&gt;
&lt;param name=&quot;controller&quot; value=&quot;true&quot; /&gt;
&lt;/object&gt;
</code></pre>
<h3 id="使用-quicktime-来播放-mp4-视频">使用 QuickTime 来播放 MP4 视频</h3>
<pre><code class="language-html">&lt;object width=&quot;420&quot; height=&quot;360&quot;
classid=&quot;clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B&quot;
codebase=&quot;http://www.apple.com/qtactivex/qtplugin.cab&quot;&gt;
&lt;param name=&quot;src&quot; value=&quot;movie.mp4&quot; /&gt;
&lt;param name=&quot;controller&quot; value=&quot;true&quot; /&gt;
&lt;/object&gt;
</code></pre>
<h3 id="使用-flash-来播放-swf-视频">使用 Flash 来播放 SWF 视频</h3>
<pre><code class="language-html">&lt;object width=&quot;400&quot; height=&quot;40&quot;
classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot;
codebase=&quot;http://fpdownload.macromedia.com/
pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0&quot;&gt;
&lt;param name=&quot;SRC&quot; value=&quot;bookmark.swf&quot;&gt;
&lt;embed src=&quot;bookmark.swf&quot; width=&quot;400&quot; height=&quot;40&quot;&gt;&lt;/embed&gt;
&lt;/object&gt;
</code></pre>
<h3 id="使用-windows-media-player-来播放-wmv-影片">使用 Windows Media Player 来播放 WMV 影片</h3>
<pre><code class="language-html">&lt;object width=&quot;100%&quot; height=&quot;100%&quot;
type=&quot;video/x-ms-asf&quot; url=&quot;3d.wmv&quot; data=&quot;3d.wmv&quot;
classid=&quot;CLSID:6BF52A52-394A-11d3-B153-00C04F79FAA6&quot;&gt;
&lt;param name=&quot;url&quot; value=&quot;3d.wmv&quot;&gt;
&lt;param name=&quot;filename&quot; value=&quot;3d.wmv&quot;&gt;
&lt;param name=&quot;autostart&quot; value=&quot;1&quot;&gt;
&lt;param name=&quot;uiMode&quot; value=&quot;full&quot; /&gt;
&lt;param name=&quot;autosize&quot; value=&quot;1&quot;&gt;
&lt;param name=&quot;playcount&quot; value=&quot;1&quot;&gt;
&lt;embed type=&quot;application/x-mplayer2&quot; src=&quot;3d.wmv&quot; width=&quot;100%&quot;
 height=&quot;100%&quot; autostart=&quot;true&quot; showcontrols=&quot;true&quot; 
pluginspage=&quot;http://www.microsoft.com/Windows/MediaPlayer/&quot;&gt;&lt;/embed&gt;
&lt;/object&gt;
</code></pre>
<h2 id="html-音频">HTML 音频</h2>
<h3 id="使用-embed-元素">使用 &lt; embed&gt; 元素</h3>
<p>&lt; embed&gt; 标签定义外部（非 HTML）内容的容器。</p>
<p>这个标签只能在HTML5中使用。</p>
<pre><code class="language-html">&lt;embed height=&quot;100&quot; width=&quot;100&quot; src=&quot;song.mp3&quot; /&gt;
</code></pre>
<p>&lt; embed&gt;的问题</p>
<ul>
<li>&lt; embed&gt; 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。</li>
<li>不同的浏览器对音频格式的支持也不同。</li>
<li>如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。</li>
<li>如果未安装插件，无法播放音频。</li>
<li>如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</li>
</ul>
<h3 id="使用-object-元素">使用 &lt; object&gt; 元素</h3>
<p>&lt; object tag&gt; 标签也可以定义外部（非 HTML）内容的容器。</p>
<pre><code class="language-html">&lt;object height=&quot;100&quot; width=&quot;100&quot; data=&quot;song.mp3&quot;&gt;&lt;/object&gt;
</code></pre>
<p>&lt; object&gt;的问题：</p>
<ul>
<li>不同的浏览器对音频格式的支持也不同。</li>
<li>如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。</li>
<li>如果未安装插件，无法播放音频。</li>
<li>如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</li>
</ul>
<h3 id="使用-html5-audio-元素">使用 HTML5 &lt; audio&gt; 元素</h3>
<p>&lt; audio&gt; 元素是一个 HTML5 元素，在 HTML 4 中是非法的</p>
<pre><code class="language-html">&lt;audio controls=&quot;controls&quot;&gt;
  &lt;source src=&quot;song.mp3&quot; type=&quot;audio/mp3&quot; /&gt;
  &lt;source src=&quot;song.ogg&quot; type=&quot;audio/ogg&quot; /&gt;
Your browser does not support this audio format.
&lt;/audio&gt;
</code></pre>
<p>&lt; audio&gt;的问题：</p>
<ul>
<li>&lt; audio&gt; 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。</li>
<li>您必须把音频文件转换为不同的格式。</li>
<li>&lt; audio&gt; 元素在老式浏览器中不起作用。</li>
</ul>
<h3 id="最好的-html-解决方法">最好的 HTML 解决方法</h3>
<pre><code class="language-html">&lt;audio controls=&quot;controls&quot; height=&quot;100&quot; width=&quot;100&quot;&gt;
  &lt;source src=&quot;song.mp3&quot; type=&quot;audio/mp3&quot; /&gt;
  &lt;source src=&quot;song.ogg&quot; type=&quot;audio/ogg&quot; /&gt;
&lt;embed height=&quot;100&quot; width=&quot;100&quot; src=&quot;song.mp3&quot; /&gt;
&lt;/audio&gt;
</code></pre>
<p>HTML5 &lt; audio&gt; 元素会尝试以 mp3 或 ogg 来播放音频。如果失败，代码将回退尝试 &lt; embed&gt; 元素。</p>
<p>问题：</p>
<ul>
<li>必须把音频转换为不同的格式。</li>
<li>&lt; audio&gt; 元素无法通过 HTML 4 和 XHTML 验证。</li>
<li>&lt; embed&gt; 元素无法通过 HTML 4 和 XHTML 验证。</li>
<li>&lt; embed&gt; 元素无法回退来显示错误消息。</li>
</ul>
<h3 id="雅虎媒体播放器">雅虎媒体播放器</h3>
<pre><code class="language-html">&lt;a href=&quot;song.mp3&quot;&gt;Play Sound&lt;/a&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://mediaplayer.yahoo.com/js&quot;&gt;
&lt;/script&gt;
</code></pre>
<h3 id="使用超链接">使用超链接</h3>
<p>如果网页包含指向媒体文件的超链接，大多数浏览器会使用“<strong>辅助应用程序</strong>”来播放文件。</p>
<pre><code class="language-html">&lt;a href=&quot;song.mp3&quot;&gt;Play the sound&lt;/a&gt;
</code></pre>
<h3 id="html-401-多媒体标签">HTML 4.01 多媒体标签</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; applet&gt;</td>
<td style="text-align:left">不赞成。定义内嵌 applet。</td>
</tr>
<tr>
<td style="text-align:left">&lt; embed&gt;</td>
<td style="text-align:left">HTML4 中不赞成，HTML5 中允许。定义内嵌对象。</td>
</tr>
<tr>
<td style="text-align:left">&lt; object&gt;</td>
<td style="text-align:left">定义内嵌对象。</td>
</tr>
<tr>
<td style="text-align:left">&lt; param&gt;</td>
<td style="text-align:left">定义对象的参数。</td>
</tr>
</tbody>
</table>
<h3 id="html-5-多媒体标签">HTML 5 多媒体标签</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; audio&gt;</td>
<td style="text-align:left">标签定义声音，比如音乐或其他音频流。</td>
</tr>
<tr>
<td style="text-align:left">&lt; embed&gt;</td>
<td style="text-align:left">标签定义嵌入的内容，比如插件。</td>
</tr>
</tbody>
</table>
<h2 id="html-视频">HTML 视频</h2>
<h3 id="使用-embed-标签">使用 &lt; embed&gt; 标签</h3>
<pre><code class="language-html">&lt;embed src=&quot;movie.swf&quot; height=&quot;200&quot; width=&quot;200&quot;/&gt;
</code></pre>
<p>问题:</p>
<ul>
<li>HTML4 无法识别 &lt; embed&gt; 标签。您的页面无法通过验证。</li>
<li>如果浏览器不支持 Flash，那么视频将无法播放</li>
<li>iPad 和 iPhone 不能显示 Flash 视频。</li>
<li>如果您将视频转换为其他格式，那么它仍然不能在所有浏览器中播放。</li>
</ul>
<h3 id="使用-object-标签">使用 &lt; object&gt; 标签</h3>
<pre><code class="language-html">&lt;object data=&quot;movie.swf&quot; height=&quot;200&quot; width=&quot;200&quot;/&gt;
</code></pre>
<p>问题：</p>
<ul>
<li>如果浏览器不支持 Flash，将无法播放视频。</li>
<li>iPad 和 iPhone 不能显示 Flash 视频。</li>
<li>如果您将视频转换为其他格式，那么它仍然不能在所有浏览器中播放。</li>
</ul>
<h3 id="使用-video-标签">使用 &lt; video&gt; 标签</h3>
<p>&lt; video&gt; 是 HTML 5 中的新标签。</p>
<pre><code class="language-html">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt;
  &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot; /&gt;
  &lt;source src=&quot;movie.webm&quot; type=&quot;video/webm&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
</code></pre>
<p>问题：</p>
<ul>
<li>必须把视频转换为很多不同的格式。</li>
<li>&lt; video&gt; 元素在老式浏览器中无效。</li>
<li>&lt; video&gt; 元素无法通过 HTML 4 和 XHTML 验证。</li>
</ul>
<h3 id="最好的-html-解决方法-2">最好的 HTML 解决方法</h3>
<p>HTML 5 + &lt; object&gt; + &lt; embed&gt;</p>
<pre><code class="language-html">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt;
  &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot; /&gt;
  &lt;source src=&quot;movie.webm&quot; type=&quot;video/webm&quot; /&gt;
  &lt;object data=&quot;movie.mp4&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;
    &lt;embed src=&quot;movie.swf&quot; width=&quot;320&quot; height=&quot;240&quot; /&gt;
  &lt;/object&gt;
&lt;/video&gt;
</code></pre>
<p>问题：</p>
<ul>
<li>必须把视频转换为很多不同的格式</li>
<li>&lt; video&gt; 元素无法通过 HTML 4 和 XHTML 验证。</li>
<li>&lt; embed&gt; 元素无法通过 HTML 4 和 XHTML 验证。</li>
</ul>
<h3 id="优酷解决方案">优酷解决方案</h3>
<pre><code class="language-html">&lt;embed src=&quot;http://player.youku.com/player.php/sid/XMzI2NTc4NTMy/v.swf&quot; 
width=&quot;480&quot; height=&quot;400&quot; 
type=&quot;application/x-shockwave-flash&quot;&gt;
&lt;/embed&gt;
</code></pre>
<h3 id="使用超链接-2">使用超链接</h3>
<pre><code class="language-html">&lt;a href=&quot;movie.swf&quot;&gt;Play a video file&lt;/a&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.18 -- html图形（2）SVG]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html-tu-xing-2svg/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html-tu-xing-2svg/">
        </link>
        <updated>2020-08-18T14:40:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="什么是svg">什么是SVG？</h3>
<ul>
<li>SVG指可伸缩矢量图形</li>
<li>使用XML定义图形</li>
<li>图像在放大或者改变尺寸时图形指令不会有损失</li>
</ul>
<h3 id="svg-的优势">SVG 的优势</h3>
<ul>
<li>SVG 图像可通过文本编辑器来创建和修改</li>
<li>SVG 图像可被搜索、索引、脚本化或压缩</li>
<li>SVG 是可伸缩的</li>
<li>SVG 图像可在任何的分辨率下被高质量地打印</li>
<li>SVG 可在图像质量不下降的情况下被放大</li>
</ul>
<h3 id="把-svg-直接嵌入-html-页面">把 SVG 直接嵌入 HTML 页面</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; height=&quot;190&quot;&gt;
   &lt;polygon points=&quot;100,10 40,180 190,60 10,60 160,180&quot;
   style=&quot;fill:red;stroke:blue;stroke-width:3;fill-rule:evenodd;&quot; /&gt;
&lt;/svg&gt;
 
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>![](E:\张丁龙\web前端\图\批注 2020-08-18 223645.jpg)</p>
<h2 id="canvas-与-svg-的比较">Canvas 与 SVG 的比较</h2>
<h4 id="canvas">Canvas</h4>
<ul>
<li>依赖分辨率</li>
<li>不支持事件处理器</li>
<li>弱的文本渲染能力</li>
<li>能够以 .png 或 .jpg 格式保存结果图像</li>
<li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li>
</ul>
<h4 id="svg">SVG</h4>
<ul>
<li>不依赖分辨率</li>
<li>支持事件处理器</li>
<li>最适合带有大型渲染区域的应用程序</li>
<li>复杂度高会减慢渲染速度（过度使用DOM）</li>
<li>不适合游戏应用</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.18 -- html图形（1）画布]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html-tu-xing-1hua-bu/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-818-html-tu-xing-1hua-bu/">
        </link>
        <updated>2020-08-18T14:39:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="html5-canvas">HTML5 canvas</h2>
<h3 id="canvas">Canvas</h3>
<p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。</p>
<h3 id="创建-canvas-元素">创建 Canvas 元素</h3>
<p>向 HTML5 页面添加 canvas 元素。</p>
<pre><code class="language-html">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;
</code></pre>
<h3 id="通过-javascript-来绘制">通过 JavaScript 来绘制</h3>
<p>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：</p>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot;&gt;
var c=document.getElementById(&quot;myCanvas&quot;);
var cxt=c.getContext(&quot;2d&quot;);
cxt.fillStyle=&quot;#FF0000&quot;;
cxt.fillRect(0,0,150,75);
&lt;/script&gt;
</code></pre>
<ol>
<li>JavaScript 使用 id 来寻找 canvas 元素：</li>
</ol>
<pre><code class="language-html">var c=document.getElementById(&quot;myCanvas&quot;);
</code></pre>
<ol start="2">
<li>创建 context 对象：</li>
</ol>
<pre><code class="language-html">var cxt=c.getContext(&quot;2d&quot;); 
</code></pre>
<p>下面的两行代码绘制一个红色的矩形：</p>
<pre><code class="language-html">cxt.fillStyle=&quot;#FF0000&quot;;
cxt.fillRect(0,0,150,75); 
</code></pre>
<p>fillStyle 方法将其染成红色，fillRect 方法规定了形状、位置和尺寸。</p>
<h3 id="实例">实例</h3>
<h4 id="线条">线条</h4>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot; style=&quot;border:1px solid #c3c3c3;&quot;&gt;
Your browser does not support the canvas element.
&lt;/canvas&gt;

&lt;script type=&quot;text/javascript&quot;&gt;

var c=document.getElementById(&quot;myCanvas&quot;);
var cxt=c.getContext(&quot;2d&quot;);
cxt.moveTo(10,10);
cxt.lineTo(150,50);
cxt.lineTo(10,50);
cxt.stroke();

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="E:%5C%E5%BC%A0%E4%B8%81%E9%BE%99%5Cweb%E5%89%8D%E7%AB%AF%5C%E5%9B%BE%5C%E4%B8%8B%E8%BD%BD.png" alt="" loading="lazy"></figure>
<h4 id="圆形">圆形</h4>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot; style=&quot;border:1px solid #c3c3c3;&quot;&gt;
Your browser does not support the canvas element.
&lt;/canvas&gt;

&lt;script type=&quot;text/javascript&quot;&gt;

var c=document.getElementById(&quot;myCanvas&quot;);
var cxt=c.getContext(&quot;2d&quot;);
cxt.fillStyle=&quot;#FF0000&quot;;
cxt.beginPath();
cxt.arc(70,18,15,0,Math.PI*2,true);
cxt.closePath();
cxt.fill();

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>![](E:\张丁龙\web前端\图\下载 (1).png)</p>
<h4 id="渐变">渐变</h4>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot; style=&quot;border:1px solid #c3c3c3;&quot;&gt;
Your browser does not support the canvas element.
&lt;/canvas&gt;


&lt;script type=&quot;text/javascript&quot;&gt;

var c=document.getElementById(&quot;myCanvas&quot;);
var cxt=c.getContext(&quot;2d&quot;);
var grd=cxt.createLinearGradient(0,0,175,50);
grd.addColorStop(0,&quot;#FF0000&quot;);
grd.addColorStop(1,&quot;#00FF00&quot;);
cxt.fillStyle=grd;
cxt.fillRect(0,0,175,50);

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>![](E:\张丁龙\web前端\图\下载 (2).png)</p>
<h4 id="图像">图像</h4>
<pre><code class="language-html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;

&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot; style=&quot;border:1px solid #c3c3c3;&quot;&gt;
Your browser does not support the canvas element.
&lt;/canvas&gt;

&lt;script type=&quot;text/javascript&quot;&gt;

var c=document.getElementById(&quot;myCanvas&quot;);
var cxt=c.getContext(&quot;2d&quot;);
var img=new Image()
img.src=&quot;/i/eg_flower.png&quot;
cxt.drawImage(img,0,0);

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[html学习8.17 -- HTML5元素、语义、迁移、约定]]></title>
        <id>https://zzddl.github.io/zdl.github.io/post/html-xue-xi-817-html5-yuan-su-yu-yi-qian-yi-yue-ding/</id>
        <link href="https://zzddl.github.io/zdl.github.io/post/html-xue-xi-817-html5-yuan-su-yu-yi-qian-yi-yue-ding/">
        </link>
        <updated>2020-08-17T15:23:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="html5-新元素">HTML5 新元素</h2>
<h3 id="新的语义结构元素">新的语义/结构元素</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; article&gt;</td>
<td style="text-align:left">定义文档内的文章。</td>
</tr>
<tr>
<td style="text-align:left">&lt; aside&gt;</td>
<td style="text-align:left">定义页面内容之外的内容。</td>
</tr>
<tr>
<td style="text-align:left">&lt; bdi&gt;</td>
<td style="text-align:left">定义与其他文本不同的文本方向。</td>
</tr>
<tr>
<td style="text-align:left">&lt; details&gt;</td>
<td style="text-align:left">定义用户可查看或隐藏的额外细节。</td>
</tr>
<tr>
<td style="text-align:left">&lt; dialog&gt;</td>
<td style="text-align:left">定义对话框或窗口。</td>
</tr>
<tr>
<td style="text-align:left">&lt; figcaption&gt;</td>
<td style="text-align:left">定义 &lt; figure&gt; 元素的标题。</td>
</tr>
<tr>
<td style="text-align:left">&lt; figure&gt;</td>
<td style="text-align:left">定义自包含内容，比如图示、图表、照片、代码清单等等。</td>
</tr>
<tr>
<td style="text-align:left">&lt; footer&gt;</td>
<td style="text-align:left">定义文档或节的页脚。</td>
</tr>
<tr>
<td style="text-align:left">&lt; header&gt;</td>
<td style="text-align:left">定义文档或节的页眉。</td>
</tr>
<tr>
<td style="text-align:left">&lt; main&gt;</td>
<td style="text-align:left">定义文档的主内容。</td>
</tr>
<tr>
<td style="text-align:left">&lt; mark&gt;</td>
<td style="text-align:left">定义重要或强调的内容。</td>
</tr>
<tr>
<td style="text-align:left">&lt; menuitem&gt;</td>
<td style="text-align:left">定义用户能够从弹出菜单调用的命令/菜单项目。</td>
</tr>
<tr>
<td style="text-align:left">&lt; meter&gt;</td>
<td style="text-align:left">定义已知范围（尺度）内的标量测量。</td>
</tr>
<tr>
<td style="text-align:left">&lt; nav&gt;</td>
<td style="text-align:left">定义文档内的导航链接。</td>
</tr>
<tr>
<td style="text-align:left">&lt; progress&gt;</td>
<td style="text-align:left">定义任务进度。</td>
</tr>
<tr>
<td style="text-align:left">&lt; rp&gt;</td>
<td style="text-align:left">定义在不支持 ruby 注释的浏览器中显示什么。</td>
</tr>
<tr>
<td style="text-align:left">&lt; rt&gt;</td>
<td style="text-align:left">定义关于字符的解释/发音（用于东亚字体）。</td>
</tr>
<tr>
<td style="text-align:left">&lt; ruby&gt;</td>
<td style="text-align:left">定义 ruby 注释（用于东亚字体）。</td>
</tr>
<tr>
<td style="text-align:left">&lt; section&gt;</td>
<td style="text-align:left">定义文档中的节。</td>
</tr>
<tr>
<td style="text-align:left">&lt; summary&gt;</td>
<td style="text-align:left">定义 &lt; details&gt; 元素的可见标题。</td>
</tr>
<tr>
<td style="text-align:left">&lt; time&gt;</td>
<td style="text-align:left">定义日期/时间。</td>
</tr>
<tr>
<td style="text-align:left">&lt; wbr&gt;</td>
<td style="text-align:left">定义可能的折行（line-break）。</td>
</tr>
</tbody>
</table>
<h3 id="新的表单元素">新的表单元素</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; datalist&gt;</td>
<td style="text-align:left">定义输入控件的预定义选项。</td>
</tr>
<tr>
<td style="text-align:left">&lt; keygen&gt;</td>
<td style="text-align:left">定义键对生成器字段（用于表单）。</td>
</tr>
<tr>
<td style="text-align:left">&lt; output&gt;</td>
<td style="text-align:left">定义计算结果。</td>
</tr>
</tbody>
</table>
<h3 id="新的输入类型">新的输入类型</h3>
<table>
<thead>
<tr>
<th style="text-align:left">新的输入类型</th>
<th>新的输入属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">color <br />data<br />datatime<br />datatime-local<br />email<br />month<br />number<br />range<br />search<br />tel<br />time<br />url<br />week</td>
<td>autocomplete<br />autofocus<br />form<br />formaction<br />formenctype<br />formmethod<br />formnovalidate<br />formtarget<br />height &amp; width<br />list<br />min&amp;max<br />multiple<br />pattern(regexp)<br />placeholder<br />required<br />step</td>
</tr>
</tbody>
</table>
<h3 id="html5-新的属性语法">HTML5 - 新的属性语法</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Empty</td>
<td style="text-align:left">&lt; input type=&quot;text&quot; value=&quot;John Doe&quot; disabled&gt;</td>
</tr>
<tr>
<td style="text-align:left">Unquoted</td>
<td style="text-align:left">&lt; input type=&quot;text&quot; value=John&gt;</td>
</tr>
<tr>
<td style="text-align:left">Double-quoted</td>
<td style="text-align:left">&lt; input type=&quot;text&quot; value=&quot;John Doe&quot;&gt;</td>
</tr>
<tr>
<td style="text-align:left">Single-quoted</td>
<td style="text-align:left">&lt; input type=&quot;text&quot; value='John Doe'&gt;</td>
</tr>
</tbody>
</table>
<h3 id="html5-图像">HTML5 图像</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; canvas&gt;</td>
<td style="text-align:left">定义使用 JavaScript 的图像绘制。</td>
</tr>
<tr>
<td style="text-align:left">&lt; svg&gt;</td>
<td style="text-align:left">定义使用 SVG 的图像绘制。</td>
</tr>
</tbody>
</table>
<h3 id="新的媒介元素">新的媒介元素</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt; audio&gt;</td>
<td style="text-align:left">定义声音或音乐内容。</td>
</tr>
<tr>
<td style="text-align:left">&lt; embed&gt;</td>
<td style="text-align:left">定义外部应用程序的容器（比如插件）。</td>
</tr>
<tr>
<td style="text-align:left">&lt; source&gt;</td>
<td style="text-align:left">定义 &lt; video&gt; 和 &lt; audio&gt; 的来源。</td>
</tr>
<tr>
<td style="text-align:left">&lt; track&gt;</td>
<td style="text-align:left">定义 &lt; video&gt; 和 &lt; audio&gt; 的轨道。</td>
</tr>
<tr>
<td style="text-align:left">&lt; video&gt;</td>
<td style="text-align:left">定义视频或影片内容。</td>
</tr>
</tbody>
</table>
<h2 id="html5-语义元素">HTML5 语义元素</h2>
<h3 id="什么是语义元素">什么是语义元素？</h3>
<p>语义元素清楚地向浏览器和开发者描述其意义。</p>
<p><em>非语义</em>元素的例子：&lt; div&gt; 和 &lt; span&gt; - 无法提供关于其内容的信息。</p>
<p><em>语义</em>元素的例子：&lt; form&gt;、&lt; table&gt; 以及 &lt; img&gt; - 清晰地定义其内容。</p>
<figure data-type="image" tabindex="1"><img src="E:%5C%E5%BC%A0%E4%B8%81%E9%BE%99%5Cweb%E5%89%8D%E7%AB%AF%5C%E5%9B%BE%5Cct_sem_elements.png" alt="" loading="lazy"></figure>
<h3 id="html5-section-元素">HTML5 &lt; section&gt; 元素</h3>
<p>&lt; section&gt; 元素定义文档中的节。</p>
<p>节（section）是有主题的内容组，通常具有标题</p>
<pre><code class="language-html">&lt;section&gt;
   &lt;h1&gt;WWF&lt;/h1&gt;
   &lt;p&gt;The World Wide Fund for Nature (WWF) is....&lt;/p&gt;
&lt;/section&gt; 
</code></pre>
<h3 id="html5-article-元素">HTML5 &lt; article&gt; 元素</h3>
<p>&lt; article&gt; 元素规定独立的自包含内容。</p>
<p>文档有其自身的意义，并且可以独立于网站其他内容进行阅读。</p>
<p>论坛、博客、新闻常用</p>
<pre><code class="language-html">&lt;article&gt;
   &lt;h1&gt;What Does WWF Do?&lt;/h1&gt;
   &lt;p&gt;WWF's mission is to stop the degradation of our planet's natural environment,
  and build a future in which humans live in harmony with nature.&lt;/p&gt;
&lt;/article&gt; 
</code></pre>
<h3 id="html5-header-元素">HTML5 &lt; header&gt; 元素</h3>
<p>&lt; header&gt; 元素为文档或节规定页眉。</p>
<p>&lt; header&gt; 元素应该被用作介绍性内容的容器。</p>
<p>一个文档中可以有多个 &lt; header&gt; 元素。</p>
<pre><code class="language-html">&lt;article&gt;
   &lt;header&gt;
     &lt;h1&gt;What Does WWF Do?&lt;/h1&gt;
     &lt;p&gt;WWF's mission:&lt;/p&gt;
   &lt;/header&gt;
   &lt;p&gt;WWF's mission is to stop the degradation of our planet's natural environment,
  and build a future in which humans live in harmony with nature.&lt;/p&gt;
&lt;/article&gt; 
</code></pre>
<h3 id="html5-footer-元素">HTML5 &lt; footer&gt; 元素</h3>
<p>&lt; footer&gt; 元素为文档或节规定页脚。</p>
<p>您可以在一个文档中使用多个 &lt; footer&gt; 元素。</p>
<pre><code class="language-html">&lt;footer&gt;
   &lt;p&gt;Posted by: Hege Refsnes&lt;/p&gt;
   &lt;p&gt;Contact information: &lt;a href=&quot;mailto:someone@example.com&quot;&gt;
  someone@example.com&lt;/a&gt;.&lt;/p&gt;
&lt;/footer&gt; 
</code></pre>
<h3 id="html5-nav-元素">HTML5 &lt; nav&gt; 元素</h3>
<p>&lt; nav&gt; 元素定义导航链接集合。</p>
<p>&lt; nav&gt; 元素旨在定义大型的导航链接块</p>
<p><strong>不是文档中所有链接都应该位于 &lt; nav&gt; 元素中</strong></p>
<pre><code class="language-html">&lt;nav&gt;
&lt;a href=&quot;/html/&quot;&gt;HTML&lt;/a&gt; |
&lt;a href=&quot;/css/&quot;&gt;CSS&lt;/a&gt; |
&lt;a href=&quot;/js/&quot;&gt;JavaScript&lt;/a&gt; |
&lt;a href=&quot;/jquery/&quot;&gt;jQuery&lt;/a&gt;
&lt;/nav&gt; 
</code></pre>
<h3 id="html5-aside-元素">HTML5 &lt; aside&gt; 元素</h3>
<p>&lt; aside&gt; 元素页面主内容之外的某些内容（比如侧栏）。</p>
<pre><code class="language-html">&lt;p&gt;My family and I visited The Epcot center this summer.&lt;/p&gt;

&lt;aside&gt;
   &lt;h4&gt;Epcot Center&lt;/h4&gt;
   &lt;p&gt;The Epcot Center is a theme park in Disney World, Florida.&lt;/p&gt;
&lt;/aside&gt; 
</code></pre>
<h3 id="html5-figure-和-figcaption-元素">HTML5 &lt; figure&gt; 和 &lt; figcaption&gt; 元素</h3>
<p>将图片和文字结合</p>
<p>通过 HTML5，图片和标题能够被组合在 <em>&lt; figure&gt;</em> 元素中：</p>
<pre><code class="language-html">&lt;figure&gt;
   &lt;img src=&quot;pic_mountain.jpg&quot; alt=&quot;The Pulpit Rock&quot; width=&quot;304&quot; height=&quot;228&quot;&gt;
   &lt;figcaption&gt;Fig1. - The Pulpit Pock, Norway.&lt;/figcaption&gt;
&lt;/figure&gt; 
</code></pre>
<h2 id="html5-迁移">HTML5 迁移</h2>
<h3 id="更改为-html5-doctype">更改为 HTML5 Doctype</h3>
<p>HTML4：</p>
<pre><code class="language-html">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; 
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
</code></pre>
<p>改为HTML5后：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
</code></pre>
<h3 id="更改为-html5-编码">更改为 HTML5 编码</h3>
<p>HTML4：</p>
<pre><code class="language-html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
</code></pre>
<p>改为 HTML5：</p>
<pre><code class="language-html">&lt;meta charset=&quot;utf-8&quot;&gt;
</code></pre>
<h3 id="添加-shiv">添加 shiv</h3>
<pre><code class="language-html">&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre>
<h3 id="为-html5-语义元素添加-css">为 HTML5 语义元素添加 CSS</h3>
<p>HTML4：</p>
<pre><code class="language-html">div#header,div#footer,div#content,div#post {
    border:1px solid grey;margin:5px;margin-bottom:15px;padding:8px;background-color:white;
}
div#header,div#footer {
    color:white;background-color:#444;margin-bottom:5px;
}
div#content {
    background-color:#ddd;
}
div#menu ul {
    margin:0;padding:0;
}
div#menu ul li {
    display:inline; margin:5px;
}
</code></pre>
<p>改为HTML5：</p>
<pre><code class="language-html">header,footer,section,article {
    border:1px solid grey;margin:5px;margin-bottom:15px;padding:8px;background-color:white;
}
header,footer {
    color:white;background-color:#444;margin-bottom:5px;
}
section {
    background-color:#ddd;
}
nav ul  {
    margin:0;padding:0;
}
nav ul li {
    display:inline; margin:5px;
}
</code></pre>
<h2 id="更改为-html5-header-和-footer">更改为 HTML5 &lt; header&gt; 和 &lt; footer&gt;</h2>
<p>HTML4：</p>
<pre><code class="language-php+HTML">&lt;div id=&quot;header&quot;&gt;
  &lt;h1&gt;Monday Times&lt;/h1&gt;
&lt;/div&gt;
.
.
.
&lt;div id=&quot;footer&quot;&gt;
  &lt;p&gt;&amp;copy; 2014 W3Schools. All rights reserved.&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>改为HTML5：</p>
<pre><code class="language-html">&lt;header&gt;
  &lt;h1&gt;Monday Times&lt;/h1&gt;
&lt;/header&gt;
.
.
.
&lt;footer&gt;
  &lt;p&gt;© 2014 W3Schools. All rights reserved.&lt;/p&gt;
&lt;/footer&gt;
</code></pre>
<h3 id="更改为-html5-nav">更改为 HTML5 &lt; nav&gt;</h3>
<p>HTML4：</p>
<pre><code class="language-html">&lt;div id=&quot;menu&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;News&lt;/li&gt;
    &lt;li&gt;Sports&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Weather&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<p>改为HTML5：</p>
<pre><code class="language-html">&lt;nav&gt;
  &lt;ul&gt;
    &lt;li&gt;News&lt;/li&gt;
    &lt;li&gt;Sports&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Weather&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>
<h3 id="更改为-html5-section">更改为 HTML5 &lt; section&gt;</h3>
<p>HTML4：</p>
<pre><code class="language-html">&lt;div id=&quot;content&quot;&gt;
.
.
.
&lt;/div&gt;
</code></pre>
<p>改为HTML5：</p>
<pre><code class="language-html">&lt;section&gt;
.
.
.
&lt;/section&gt;
</code></pre>
<h3 id="更改为-html5-article">更改为 HTML5 &lt; article&gt;</h3>
<p>HTML4：</p>
<pre><code class="language-html">&lt;div class=&quot;post&quot;&gt;
  &lt;h2&gt;News Article&lt;/h2&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>改为HTML5：</p>
<pre><code class="language-html">&lt;article&gt;
  &lt;h2&gt;News Article&lt;/h2&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
&lt;/article&gt;
</code></pre>
<h3 id="article-section-与-div-之间的差异">&lt; article&gt; &lt; section&gt; 与 &lt; div&gt; 之间的差异</h3>
<p>在 HTML5 标准中，&lt; section&gt; 元素被定位为相关元素的块。</p>
<p>&lt; article&gt; 元素被定义为相关元素的完整的自包含块。</p>
<p>&lt; div&gt; 元素被定义为子元素的块。</p>
<p>&lt; article&gt; 可以作为&lt; article&gt;的容器</p>
<p>&lt; article&gt;也可以作为&lt; div&gt;的容器</p>
<p>&lt; article&gt; 包含 &lt; section&gt; 包含&lt; div&gt;</p>
<pre><code class="language-html">&lt;article&gt; 中的 &lt;section&gt; 中的 &lt;div&gt;：

&lt;article&gt;

&lt;section&gt;
&lt;h2&gt;Famous Cities&lt;/h2&gt;

&lt;div class=&quot;city&quot;&gt;
&lt;h2&gt;London&lt;/h2&gt;
&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom,
with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;city&quot;&gt;
&lt;h2&gt;Paris&lt;/h2&gt;
&lt;p&gt;Paris is the capital and most populous city of France.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;city&quot;&gt;
&lt;h2&gt;Tokyo&lt;/h2&gt;
&lt;p&gt;Tokyo is the capital of Japan, the center of the Greater Tokyo Area,
and the most populous metropolitan area in the world.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;h2&gt;Famous Countries&lt;/h2&gt;

&lt;div class=&quot;country&quot;&gt;
&lt;h2&gt;England&lt;/h2&gt;
&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom,
with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;country&quot;&gt;
&lt;h2&gt;France&lt;/h2&gt;
&lt;p&gt;Paris is the capital and most populous city of France.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;country&quot;&gt;
&lt;h2&gt;Japan&lt;/h2&gt;
&lt;p&gt;Tokyo is the capital of Japan, the center of the Greater Tokyo Area,
and the most populous metropolitan area in the world.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;

&lt;/article&gt;
</code></pre>
<h3 id="典型的-html5-页面">典型的 HTML5 页面</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;title&gt;HTML5&lt;/title&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;

&lt;!--[if lt IE 9]&gt;
&lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;
&lt;/script&gt;
&lt;![endif]--&gt;

&lt;style&gt;
body {
    font-family:Verdana,sans-serif;font-size:0.8em;
}
header,footer,section,article {
    border:1px solid grey;
    margin:5px;margin-bottom:15px;padding:8px;
    background-color:white;
}
header,footer {
    color:white;background-color:#444;margin-bottom:5px;
}
section {
    background-color:#ddd;
}
nav ul {
    margin:0;padding:0;
}
nav ul li {
    display:inline; margin:5px;
}
&lt;/style&gt;
&lt;body&gt;

&lt;header&gt;
  &lt;h1&gt;Monday Times&lt;/h1&gt;
&lt;/header&gt;

&lt;nav&gt;
  &lt;ul&gt;
    &lt;li&gt;News&lt;/li&gt;
    &lt;li&gt;Sports&lt;/li&gt;
    &lt;li&gt;Weather&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;section&gt;
&lt;h2&gt;News Section&lt;/h2&gt;

&lt;div id=&quot;post&quot;&gt;
  &lt;h2&gt;News Article&lt;/h2&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;post&quot;&gt;
&lt;h2&gt;News Article&lt;/h2&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
  &lt;p&gt;Ipsum lurum hurum turum ipsum lurum hurum turum ipsum lurum hurum turum ipsum 
  lurum hurum turum.&lt;/p&gt;
&lt;/div&gt;

&lt;/section&gt;

&lt;footer&gt;
  &lt;p&gt;&amp;copy; 2014 Monday Times. All rights reserved.&lt;/p&gt;
&lt;/footer&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="html5代码约定">HTML5代码约定</h2>
<ul>
<li>小写元素名</li>
<li>声明正确的文档类型</li>
<li>关闭所有 HTML 元素</li>
<li>关闭空的 HTML 元素</li>
<li>小写属性名</li>
<li>属性值加引号</li>
<li>必需的属性，例如图片中的alt</li>
<li>空格和等号</li>
<li>避免长代码行（80个字符）</li>
<li>空行和缩进</li>
<li>省略 &lt; html&gt; 和 &lt; body&gt;（尽量不省略）</li>
<li>省略 &lt; head&gt; HTML5中默认&lt; body&gt;之前的为head元素</li>
<li>元数据，在文档中对语言和字符编码的定义越早越好</li>
<li>HTML 注释，短注释应该在单行中书写，并在 &lt;!-- 之后增加一个空格，在 &lt;!-- 之前增加一个空格：</li>
<li>样式表</li>
<li>小写文件名</li>
</ul>
]]></content>
    </entry>
</feed>